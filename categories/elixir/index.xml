<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elixir on Bitwalker</title>
    <link>http://bitwalker.org/categories/elixir/</link>
    <description>Recent content in Elixir on Bitwalker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 18 Mar 2018 11:00:00 -0600</lastBuildDate>
    
	<atom:link href="http://bitwalker.org/categories/elixir/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Functional Imperative Programming With Elixir</title>
      <link>http://bitwalker.org/posts/2018-03-18-functional-imperative-programming-with-elixir/</link>
      <pubDate>Sun, 18 Mar 2018 11:00:00 -0600</pubDate>
      
      <guid>http://bitwalker.org/posts/2018-03-18-functional-imperative-programming-with-elixir/</guid>
      <description>I recently found myself wishing for the simple convenience of a while loop in Elixir. I had a test where I wanted to loop and test a condition, and either break out of that loop, or time out after some period. Writing this in the form of a recursive function is relatively easy, but is not really fully general:
def while(predicate, timeout) when is_function(predicate, 0) and is_integer(timeout) do while(predicate, timeout, System.</description>
    </item>
    
    <item>
      <title>Using Elixir 1.5&#39;s open command with Emacs.app</title>
      <link>http://bitwalker.org/posts/2017-08-28-open-with-iex-and-emacs/</link>
      <pubDate>Mon, 28 Aug 2017 21:19:00 -0500</pubDate>
      
      <guid>http://bitwalker.org/posts/2017-08-28-open-with-iex-and-emacs/</guid>
      <description>If you are a user of Emacs, you may have seen Chris McCord&amp;rsquo;s post on the Dockyard blog last week about using Elixir 1.5&amp;rsquo;s new open command in IEx with terminal Emacs.
Being an Emacs user, but preferring Emacs.app generally to the terminal Emacs, I decided to investigate applying his work to my own workflow. I promised to write it up if I succeeded, so here we are!
The first thing we need to do is place some scripts (or symlink them) in /usr/local/bin.</description>
    </item>
    
    <item>
      <title>Elixir/Erlang Clustering in Kubernetes</title>
      <link>http://bitwalker.org/posts/2016-08-04-clustering-in-kubernetes/</link>
      <pubDate>Thu, 04 Aug 2016 18:00:00 -0500</pubDate>
      
      <guid>http://bitwalker.org/posts/2016-08-04-clustering-in-kubernetes/</guid>
      <description>At work, our infrastructure is run on OpenShift Origin, a RedHat OSS project which is a bunch of nice tooling on top of Kubernetes. It&amp;rsquo;s been really pleasant to work with for the most part, though there have been some growing pains and lessons learned along the way. Since I was responsible for pushing to adopt it, and setting up the cluster, I&amp;rsquo;ve been sort of the go-to for edge cases and advice designing our applications around it.</description>
    </item>
    
    <item>
      <title>Distillery vs. Exrm vs. Relx</title>
      <link>http://bitwalker.org/posts/2016-07-21-distillery-vs-exrm-vs-relx/</link>
      <pubDate>Thu, 21 Jul 2016 17:48:07 -0500</pubDate>
      
      <guid>http://bitwalker.org/posts/2016-07-21-distillery-vs-exrm-vs-relx/</guid>
      <description>I received an excellent question on Twitter today:
Can you explain the different ideas/approaches of distillery/exrm and relx? Maybe even edeliver? What prompted the rewrite? ðŸ™‚
&amp;mdash; Felipe Sere (@felipesere) July 21, 2016  I&amp;rsquo;ve been focusing more on implementing Distillery, sharing it with people willing to help test, etc., that I forgot to sit down and write down why it exists in the first place. So in this post, I&amp;rsquo;ll attempt to explain as best I can.</description>
    </item>
    
    <item>
      <title>Releases For Elixir</title>
      <link>http://bitwalker.org/posts/2014-03-11-releases-for-elixir/</link>
      <pubDate>Thu, 20 Mar 2014 01:00:00 -0500</pubDate>
      
      <guid>http://bitwalker.org/posts/2014-03-11-releases-for-elixir/</guid>
      <description>Be forewarned, this post requires a fair amount of knowledge about Elixir or Erlang. Though the topic of hot code upgrades and downgrades is probably of interest to any dev who crosses the line in to ops on a regular basis, this particular post is going to be diving headlong into the madness that is Erlang releases, and how I&amp;rsquo;ve fixed them for Elixir.
I was hanging out in #elixir-lang last week, when someone (I believe it was tylerflint) brought up the issue of performing releases with Elixir.</description>
    </item>
    
    <item>
      <title>What Is Elixir, and Why Do I Care?</title>
      <link>http://bitwalker.org/posts/2014-03-10-what-is-elixir-and-why-do-i-care/</link>
      <pubDate>Mon, 10 Mar 2014 17:52:37 -0500</pubDate>
      
      <guid>http://bitwalker.org/posts/2014-03-10-what-is-elixir-and-why-do-i-care/</guid>
      <description>This was the first thing that sprung to my mind when I first heard about Elixir. Up until that point I had written significant code in a number of languages and platforms, looking for one that felt right, if that&amp;rsquo;s even the best way to phrase the nature of my search. C#, Ruby, Python, Javascript, Scala, Clojure, C and C++ - all of them shared one theme in common: I enjoy some aspect of them, each has their pros and cons, I was able to program effectively in them, and generally the communities are great.</description>
    </item>
    
  </channel>
</rss>