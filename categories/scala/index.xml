<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scala on Bitwalker</title>
    <link>http://bitwalker.org/categories/scala/</link>
    <description>Recent content in Scala on Bitwalker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Jul 2014 10:30:05 -0500</lastBuildDate>
    
	<atom:link href="http://bitwalker.org/categories/scala/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Proxied Streaming Uploads with Scala/Play</title>
      <link>http://bitwalker.org/posts/2014-07-10-scala-streaming-file-uploads/</link>
      <pubDate>Thu, 10 Jul 2014 10:30:05 -0500</pubDate>
      
      <guid>http://bitwalker.org/posts/2014-07-10-scala-streaming-file-uploads/</guid>
      <description>I recently was working on a project using a mashup of technologies: Scala, Play Framework, Sqrrl/Accumulo, Microsoft SQL Server, Hadoop/HDFS, Hive, and some others. Needless to say, rampup was a bit like swallowing water from a firehose. I was brought on to help get a release completed by it&amp;rsquo;s deadline, so I wasn&amp;rsquo;t on the project for more than a month, but I did encounter one very fun problem that I felt like sharing.</description>
    </item>
    
    <item>
      <title>Learn by Example: Scala Parser Combinators</title>
      <link>http://bitwalker.org/posts/2013-08-10-learn-by-example-scala-parser-combinators/</link>
      <pubDate>Sat, 10 Aug 2013 22:28:00 -0500</pubDate>
      
      <guid>http://bitwalker.org/posts/2013-08-10-learn-by-example-scala-parser-combinators/</guid>
      <description>One of the more common things you run into during software development is the need to parse arbitrary text for data. Typically, you might use regular expressions, or encode assumptions about the data format in the way you parse the text (think slicing a string at specific indices, splitting on commas, etc). Both of these are brittle, and require a lot of verbose code to properly handle all of the possible failure points.</description>
    </item>
    
  </channel>
</rss>